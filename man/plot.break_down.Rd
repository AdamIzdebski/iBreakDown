% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot.R
\name{plot.break_down}
\alias{plot.break_down}
\title{Plot Generic for Break Down Objects}
\usage{
\method{plot}{break_down}(x, ..., add_contributions = TRUE,
  baseline = NA, vcolors = c(`-1` = "#f05a71", `0` = "#371ea3", `1` =
  "#8bdcbe", X = "#371ea3"), digits = 3, rounding_function = round,
  plot_distributions = FALSE)
}
\arguments{
\item{x}{the model model of `break_down` class.}

\item{...}{other parameters.}

\item{add_contributions}{shall variable contributions to be added on plot?}

\item{baseline}{if numeric then veritical line will start in baseline.}

\item{vcolors}{named vector with colors.}

\item{digits}{number of decimal places (round) or significant digits (signif) to be used.
See the \code{rounding_function} argument.}

\item{rounding_function}{function that is to used for rounding numbers.
It may be \code{\link{signif}} which keeps a specified number of significant digits.
Or the default \code{\link{round}} to have the same precision for all components.}

\item{plot_distributions}{if `TRUE` then distributions of conditional propotions will be plotted. This requires \code{keep_distributions=TRUE} in the
\code{\link{break_down}}, \code{\link{local_attributions}}, or \code{\link{local_interactions}}.}
}
\value{
a `ggplot2` object.
}
\description{
Plot Generic for Break Down Objects
}
\examples{
\dontrun{
## Not run:
library("DALEX")
library("iBreakDown")
library("randomForest")
set.seed(1313)
# example with interaction
# classification for HR data
model <- randomForest(status ~ . , data = HR)
new_observation <- HR_test[1,]

explainer_rf <- explain(model,
                        data = HR[1:1000,1:5],
                        y = HR$status[1:1000])

bd_rf <- local_attributions(explainer_rf,
                           new_observation)
bd_rf
plot(bd_rf)
plot(bd_rf, baseline = 0)

bd_rf <- local_attributions(explainer_rf,
                           new_observation,
                           keep_distributions = TRUE)
bd_rf
plot(bd_rf, plot_distributions = TRUE)

bd_rf <- local_interactions(explainer_rf,
                 new_observation,
                 keep_distributions = TRUE)

bd_rf
plot(bd_rf)
plot(bd_rf, plot_distributions = TRUE)

# example for regression - apartment prices
# here we do not have intreactions
model <- randomForest(m2.price ~ . , data = apartments)
explainer_rf <- explain(model,
                        data = apartments_test[1:1000,2:6],
                        y = apartments_test$m2.price[1:1000])

bd_rf <- local_attributions(explainer_rf,
                           apartments_test[1,])
bd_rf
plot(bd_rf, digits = 1)
plot(bd_rf, digits = 1, baseline = 0)

bd_rf <- local_attributions(explainer_rf,
                           apartments_test[1,],
                           keep_distributions = TRUE)
plot(bd_rf, plot_distributions = TRUE)

bd_rf <- local_interactions(explainer_rf,
                 new_observation = apartments_test[1,],
                 keep_distributions = TRUE)

bd_rf
plot(bd_rf)
plot(bd_rf, plot_distributions = TRUE)
}
}

% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/break_interactions.R
\name{local_interactions}
\alias{local_interactions}
\alias{local_interactions.explainer}
\alias{local_interactions.default}
\title{Model Agnostic Sequential Variable Attributions with Interactions}
\usage{
local_interactions(x, ...)

\method{local_interactions}{explainer}(x, new_observation,
  keep_distributions = FALSE, ...)

\method{local_interactions}{default}(x, data, predict_function = predict,
  new_observation, keep_distributions = FALSE,
  interaction_preference = 1, label = class(x)[1], ...)
}
\arguments{
\item{x}{a model to be explained, or an explainer created with function `DALEX::explain()`.}

\item{...}{other parameters}

\item{new_observation}{a new observation with columns that corresponds to variables used in the model}

\item{keep_distributions}{if TRUE, then the distribution of partial predictions is stored in addition to the average.}

\item{data}{validation dataset, will be extracted from `x` if it's an explainer}

\item{predict_function}{predict function, will be extracted from `x` if it's an explainer}

\item{interaction_preference}{a constant that set the preference for interactions. By default `1`. The larger the more frequently intereactions will be presented in explanations}

\item{label}{character - the name of the model. By default it's extracted from the 'class' attribute of the model}
}
\value{
an object of the `break_down` class
}
\description{
This function implements decomposition of model predictions with identification
of interactions.
The complexity of this function is O(2*p) for additive models and O(2*p^2) for interactions.
This function works in similar way to step-up and step-down greedy approximations,
the main difference is that in the first step the order of variables is determined.
And in the second step the impact is calculated.
}
\examples{
\dontrun{
library("DALEX")
library("iBreakDown")
library("randomForest")
set.seed(1313)
# example with interaction
# classification for HR data
model <- randomForest(status ~ . , data = HR)
new_observation <- HR_test[1,]

explainer_rf <- explain(model,
                 data = HR[1:1000,1:5],
                 y = HR$status[1:1000])

bd_rf <- local_interactions(explainer_rf,
                 new_observation,
                 keep_distributions = TRUE)

bd_rf
plot(bd_rf)
plot(bd_rf, plot_distributions = TRUE)

# example for regression - apartment prices
# here we do not have intreactions
model <- randomForest(m2.price ~ . , data = apartments)
explainer_rf <- explain(model,
         data = apartments_test[1:1000,2:6],
         y = apartments_test$m2.price[1:1000])

new_observation <- apartments_test[1,]

bd_rf <- local_interactions(explainer_rf,
                 new_observation,
                 keep_distributions = TRUE)

bd_rf
plot(bd_rf)
plot(bd_rf, plot_distributions = TRUE)
}
}

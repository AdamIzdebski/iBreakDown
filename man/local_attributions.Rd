% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/break_down.R
\name{local_attributions}
\alias{local_attributions}
\alias{local_attributions.explainer}
\alias{local_attributions.default}
\title{Model Agnostic Sequential Variable attributions}
\usage{
local_attributions(x, ...)

\method{local_attributions}{explainer}(x, new_observation,
  keep_distributions = FALSE, ...)

\method{local_attributions}{default}(x, data, predict_function = predict,
  new_observation, keep_distributions = FALSE, order = NULL,
  label = class(x)[1], ...)
}
\arguments{
\item{x}{a model to be explained, or an explainer created with function `DALEX::explain()`.}

\item{...}{other parameters}

\item{new_observation}{a new observation with columns that corresponds to variables used in the model}

\item{keep_distributions}{if `TRUE`, then distributions of partial predictions is stored and can be plotted with the generic `plot()`}

\item{data}{validation dataset, will be extracted from `x` if it's an explainer}

\item{predict_function}{predict function, will be extracted from `x` if it's an explainer}

\item{order}{if not `NULL`, then it will be a fixed order of variables. It can be a numeric vector or vector with names of variables.}

\item{label}{name of the model. By default it's extracted from the 'class' attribute of the model}
}
\value{
an object of the `break_down` class
}
\description{
This function finds Variable attributions via Sequential Variable Conditioning
The complexity of this function is O(2*p).
This function first determines the order for conditionings and then calculate variable effects via sequence of conditionings.
}
\examples{
\dontrun{
## Not run:
library("DALEX2")
library("iBreakDown")
library("randomForest")
set.seed(1313)
# example with interaction
# classification for HR data
model <- randomForest(status ~ . , data = HR)
new_observation <- HRTest[1,]

explainer_rf <- explain(model,
                        data = HR[1:1000,1:5],
                        y = HR$status[1:1000])

bd_rf <- local_attributions(explainer_rf,
                           new_observation)
bd_rf
plot(bd_rf)
plot(bd_rf, start_baseline = TRUE)

bd_rf <- local_attributions(explainer_rf,
                           new_observation,
                           keep_distributions = TRUE)
bd_rf
plot(bd_rf, plot_distributions = TRUE)

# example for regression - apartment prices
# here we do not have intreactions
model <- randomForest(m2.price ~ . , data = apartments)
explainer_rf <- explain(model,
                        data = apartmentsTest[1:1000,2:6],
                        y = apartmentsTest$m2.price[1:1000])

bd_rf <- local_attributions(explainer_rf,
                           apartmentsTest[1,])
bd_rf
plot(bd_rf, digits = 1)
plot(bd_rf, digits = 1, start_baseline = TRUE)

bd_rf <- local_attributions(explainer_rf,
                           apartmentsTest[1,],
                           keep_distributions = TRUE)
plot(bd_rf, plot_distributions = TRUE)
}
}

% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/break_down.R
\name{local_attribution}
\alias{local_attribution}
\title{Model Agnostic Sequential Variable Attributions}
\usage{
local_attribution(x)
}
\arguments{
\item{x}{a model to be explained, or an explaienr created with function `DALEX::explain()`.}

\item{data}{validation dataset, will be extracted from `x` if it's an explainer}

\item{predict_function}{predict function, will be extracted from `x` if it's an explainer}

\item{new_observation}{a new observation with columns that corresponds to variables used in the model}

\item{keep_distributions}{if `TRUE`, then distributions of partial predictions is stored and can be plotted with the generic `plot()`}
}
\value{
an object of the break_down class
}
\description{
This function finds Variable Attributions via Sequential Variable Conditioning
The complexity of this function is O(2*p).
This function first determines the order for conditionings and then calculate variable effects via sequence of conditionings.
}
\examples{
\dontrun{
library("DALEX2")
library("breakDown2")
library("randomForest")
set.seed(1313)
# example with interaction
# classification for HR data
model <- randomForest(status ~ . , data = HR)
new_observation <- HRTest[1,]

explainer_rf <- explain(model,
                 data = HR[1:1000,1:5],
                 y = HR$status[1:1000])

bd_rf <- local_attribution(explainer_rf_fired,
                 new_observation,
                 keep_distributions = TRUE)

bd_rf
plot(bd_rf)
plot(bd_rf, plot_distributions = TRUE)

bd_rf <- local_attribution(explainer_rf_fired,
                 new_observation,
                 check_interactions = FALSE,
                 keep_distributions = TRUE)

bd_rf
plot(bd_rf)

# example for regression - apartment prices
# here we do not have intreactions
model <- randomForest(m2.price ~ . , data = apartments)
explainer_rf <- explain(model,
         data = apartmentsTest[1:1000,2:6],
         y = apartmentsTest$m2.price[1:1000],
         label = "rf")

bd_rf <- local_attribution(explainer_rf,
         apartmentsTest[1,],
         check_interactions = FALSE,
         keep_distributions = TRUE)

bd_rf
plot(bd_rf)
plot(bd_rf, plot_distributions = TRUE)
}
}
